// DOM Elements
const dashboardLink = document.getElementById('dashboard-link');
const itemsLink = document.getElementById('items-link');
const aboutLink = document.getElementById('about-link');
const dashboard = document.getElementById('dashboard');
const items = document.getElementById('items');
const about = document.getElementById('about');
const themeToggle = document.querySelector('.theme-toggle');
const totalItemsEl = document.getElementById('total-items');
const avgPriceEl = document.getElementById('avg-price');
const totalValueEl = document.getElementById('total-value');
const priceChartEl = document.getElementById('price-chart');
const itemsTable = document.getElementById('items-table');
const itemsList = document.getElementById('items-list');
const addItemBtn = document.getElementById('add-item-btn');
const itemModal = document.getElementById('item-modal');
const modalTitle = document.getElementById('modal-title');
const itemForm = document.getElementById('item-form');
const itemIdInput = document.getElementById('item-id');
const itemNameInput = document.getElementById('item-name');
const itemDescInput = document.getElementById('item-description');
const itemPriceInput = document.getElementById('item-price');
const saveItemBtn = document.getElementById('save-item');
const cancelItemBtn = document.getElementById('cancel-item');
const closeModalBtns = document.querySelectorAll('.close-modal');
const confirmModal = document.getElementById('confirm-modal');
const confirmMessage = document.getElementById('confirm-message');
const confirmActionBtn = document.getElementById('confirm-action');
const cancelConfirmBtn = document.getElementById('cancel-confirm');
const searchInput = document.getElementById('search-items');
const sortSelect = document.getElementById('sort-by');

// State
let allItems = [];
let currentItemId = null;
let deleteItemId = null;
let chart = null;

// Navigation
dashboardLink.addEventListener('click', (e) => {
    e.preventDefault();
    setActiveSection(dashboard);
    setActiveLink(dashboardLink);
    loadDashboardData();
});

itemsLink.addEventListener('click', (e) => {
    e.preventDefault();
    setActiveSection(items);
    setActiveLink(itemsLink);
    loadItems();
});

aboutLink.addEventListener('click', (e) => {
    e.preventDefault();
    setActiveSection(about);
    setActiveLink(aboutLink);
});

function setActiveSection(section) {
    document.querySelectorAll('.section').forEach(s => s.classList.remove('active'));
    section.classList.add('active');
}

function setActiveLink(link) {
    document.querySelectorAll('nav a').forEach(a => a.classList.remove('active'));
    link.classList.add('active');
}

// Theme toggle
themeToggle.addEventListener('click', () => {
    document.body.classList.toggle('dark-theme');
    const icon = themeToggle.querySelector('i');
    if (document.body.classList.contains('dark-theme')) {
        icon.classList.remove('fa-moon');
        icon.classList.add('fa-sun');
    } else {
        icon.classList.remove('fa-sun');
        icon.classList.add('fa-moon');
    }
});

// API calls
async function fetchItems() {
    try {
        const response = await fetch('/items/');
        if (!response.ok) throw new Error('Failed to fetch items');
        const data = await response.json();
        return data;
    } catch (error) {
        console.error('Error fetching items:', error);
        return [];
    }
}

async function fetchItem(id) {
    try {
        const response = await fetch(`/items/${id}`);
        if (!response.ok) throw new Error('Failed to fetch item');
        return await response.json();
    } catch (error) {
        console.error(`Error fetching item ${id}:`, error);
        return null;
    }
}

async function createItem(item) {
    try {
        const response = await fetch('/items/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(item)
        });
        if (!response.ok) throw new Error('Failed to create item');
        return await response.json();
    } catch (error) {
        console.error('Error creating item:', error);
        return null;
    }
}

async function updateItem(id, item) {
    try {
        const response = await fetch(`/items/${id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(item)
        });
        if (!response.ok) throw new Error(`Failed to update item ${id}`);
        return await response.json();
    } catch (error) {
        console.error(`Error updating item ${id}:`, error);
        return null;
    }
}

async function deleteItem(id) {
    try {
        const response = await fetch(`/items/${id}`, {
            method: 'DELETE'
        });
        if (!response.ok) throw new Error(`Failed to delete item ${id}`);
        return await response.json();
    } catch (error) {
        console.error(`Error deleting item ${id}:`, error);
        return null;
    }
}

// Dashboard
async function loadDashboardData() {
    const items = await fetchItems();
    
    if (items.length === 0) {
        totalItemsEl.textContent = '0';
        avgPriceEl.textContent = '$0.00';
        totalValueEl.textContent = '$0.00';
        priceChartEl.innerHTML = '<div class="no-data">No items available</div>';
        return;
    }
    
    // Update stats
    totalItemsEl.textContent = items.length;
    
    const totalPrice = items.reduce((sum, item) => sum + item.price, 0);
    const avgPrice = totalPrice / items.length;
    
    avgPriceEl.textContent = `$${avgPrice.toFixed(2)}`;
    totalValueEl.textContent = `$${totalPrice.toFixed(2)}`;
    
    // Create price ranges for chart
    const priceRanges = [
        { range: '$0-$50', count: 0 },
        { range: '$51-$100', count: 0 },
        { range: '$101-$500', count: 0 },
        { range: '$501-$1000', count: 0 },
        { range: '$1000+', count: 0 }
    ];
    
    items.forEach(item => {
        const price = item.price;
        if (price <= 50) {
            priceRanges[0].count++;
        } else if (price <= 100) {
            priceRanges[1].count++;
        } else if (price <= 500) {
            priceRanges[2].count++;
        } else if (price <= 1000) {
            priceRanges[3].count++;
        } else {
            priceRanges[4].count++;
        }
    });
    
    // Create chart
    if (chart) {
        chart.destroy();
    }
    
    const options = {
        series: [{
            name: 'Items',
            data: priceRanges.map(range => range.count)
        }],
        chart: {
            type: 'bar',
            height: 300,
            toolbar: {
                show: false
            }
        },
        plotOptions: {
            bar: {
                borderRadius: 4,
                horizontal: false,
            }
        },
        dataLabels: {
            enabled: false
        },
        xaxis: {
            categories: priceRanges.map(range => range.range),
        },
        colors: ['#4a6bff']
    };
    
    chart = new ApexCharts(priceChartEl, options);
    chart.render();
}

// Items
async function loadItems() {
    itemsList.innerHTML = '<tr><td colspan="5" class="loading-message">Loading items...</td></tr>';
    
    const items = await fetchItems();
    allItems = items;
    
    displayItems(items);
}

function displayItems(items) {
    if (items.length === 0) {
        itemsList.innerHTML = '<tr><td colspan="5" class="loading-message">No items found</td></tr>';
        return;
    }
    
    itemsList.innerHTML = items.map(item => `
        <tr>
            <td>${item.id}</td>
            <td>${item.name}</td>
            <td>${item.description || '-'}</td>
            <td>$${item.price.toFixed(2)}</td>
            <td class="item-actions">
                <button class="btn-icon btn-edit" data-id="${item.id}">
                    <i class="fas fa-edit"></i>
                </button>
                <button class="btn-icon btn-delete" data-id="${item.id}">
                    <i class="fas fa-trash"></i>
                </button>
            </td>
        </tr>
    `).join('');
    
    // Add event listeners to edit and delete buttons
    document.querySelectorAll('.btn-edit').forEach(btn => {
        btn.addEventListener('click', () => {
            const id = parseInt(btn.getAttribute('data-id'));
            openEditItemModal(id);
        });
    });
    
    document.querySelectorAll('.btn-delete').forEach(btn => {
        btn.addEventListener('click', () => {
            const id = parseInt(btn.getAttribute('data-id'));
            openDeleteConfirmation(id);
        });
    });
}

// Search and filter
searchInput.addEventListener('input', () => {
    const searchTerm = searchInput.value.toLowerCase();
    const filteredItems = allItems.filter(item => 
        item.name.toLowerCase().includes(searchTerm) || 
        (item.description && item.description.toLowerCase().includes(searchTerm))
    );
    displayItems(filteredItems);
});

sortSelect.addEventListener('change', () => {
    const sortValue = sortSelect.value;
    let sortedItems = [...allItems];
    
    switch (sortValue) {
        case 'name':
            sortedItems.sort((a, b) => a.name.localeCompare(b.name));
            break;
        case 'price-low':
            sortedItems.sort((a, b) => a.price - b.price);
            break;
        case 'price-high':
            sortedItems.sort((a, b) => b.price - a.price);
            break;
    }
    
    displayItems(sortedItems);
});

// Modal functions
function openAddItemModal() {
    modalTitle.textContent = 'Add New Item';
    itemForm.reset();
    itemIdInput.value = '';
    currentItemId = null;
    itemModal.style.display = 'block';
}

async function openEditItemModal(id) {
    modalTitle.textContent = 'Edit Item';
    itemForm.reset();
    
    const item = await fetchItem(id);
    if (!item) return;
    
    itemIdInput.value = item.id;
    itemNameInput.value = item.name;
    itemDescInput.value = item.description || '';
    itemPriceInput.value = item.price;
    
    currentItemId = id;
    itemModal.style.display = 'block';
}

function closeItemModal() {
    itemModal.style.display = 'none';
}

function openDeleteConfirmation(id) {
    deleteItemId = id;
    confirmMessage.textContent = `Are you sure you want to delete this item?`;
    confirmModal.style.display = 'block';
}

function closeConfirmModal() {
    confirmModal.style.display = 'none';
}

// Event listeners
addItemBtn.addEventListener('click', openAddItemModal);

closeModalBtns.forEach(btn => {
    btn.addEventListener('click', function() {
        const modal = this.closest('.modal');
        modal.style.display = 'none';
    });
});

cancelItemBtn.addEventListener('click', closeItemModal);

cancelConfirmBtn.addEventListener('click', closeConfirmModal);

confirmActionBtn.addEventListener('click', async () => {
    if (deleteItemId) {
        const result = await deleteItem(deleteItemId);
        if (result) {
            loadItems();
            loadDashboardData();
        }
    }
    closeConfirmModal();
});

itemForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const item = {
        name: itemNameInput.value,
        description: itemDescInput.value || null,
        price: parseFloat(itemPriceInput.value)
    };
    
    let result;
    if (currentItemId) {
        result = await updateItem(currentItemId, item);
    } else {
        result = await createItem(item);
    }
    
    if (result) {
        closeItemModal();
        loadItems();
        loadDashboardData();
    }
});

// Close modals when clicking outside
window.addEventListener('click', (e) => {
    if (e.target === itemModal) {
        closeItemModal();
    } else if (e.target === confirmModal) {
        closeConfirmModal();
    }
});

// Initial load
document.addEventListener('DOMContentLoaded', () => {
    setActiveSection(dashboard);
    setActiveLink(dashboardLink);
    loadDashboardData();
});